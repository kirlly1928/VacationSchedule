<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>График отпусков сотрудников</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6; /* Светло-серый фон */
        }
        .container {
            max-width: 1000px; /* Увеличена максимальная ширина для лучшего отображения таблицы */
            margin: 2rem auto;
            padding: 1.5rem;
            background-color: white;
            border-radius: 0.5rem; /* Закругленные углы */
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }
        .table-header th {
            background-color: #e5e7eb; /* Фон заголовков таблицы */
        }
        .btn {
            transition: background-color 0.3s ease;
        }
        .btn-primary {
            background-color: #3b82f6; /* Синий */
            color: white;
        }
        .btn-primary:hover {
            background-color: #2563eb;
        }
        .btn-danger {
            background-color: #ef4444; /* Красный */
            color: white;
        }
        .btn-danger:hover {
            background-color: #dc2626;
        }
        .modal {
            display: none; /* Скрыто по умолчанию */
            position: fixed;
            z-index: 50;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
        }
        .modal-content {
            background-color: #fefefe;
            margin: 15% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 80%;
            max-width: 500px;
            border-radius: 0.5rem;
        }
        .close-button {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }
        .close-button:hover,
        .close-button:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }
        /* Стили для визуализации календаря */
        .calendar-view {
            margin-top: 2rem;
            padding: 1rem;
            background-color: #f9fafb;
            border-radius: 0.5rem;
            overflow-x: auto; /* Горизонтальная прокрутка для календаря */
        }
        .timeline {
            display: flex;
            flex-direction: column;
            gap: 0.5rem; /* Пространство между сотрудниками */
        }
        .employee-timeline {
            display: flex;
            align-items: center;
            margin-bottom: 0.5rem;
        }
        .employee-name-calendar {
            width: 150px; /* Фиксированная ширина для имени сотрудника */
            font-weight: 500;
            padding-right: 1rem;
            flex-shrink: 0; /* Предотвращает сжатие имени */
        }
        .days-container {
            display: flex;
            flex-grow: 1; /* Занимает оставшееся пространство */
            position: relative; /* Для позиционирования отпускных блоков */
            height: 30px; /* Высота полосы для дней */
            background-color: #e5e7eb; /* Фон для полосы дней */
            border-radius: 0.25rem;
        }
        .day-block {
            position: absolute; /* Позиционирование относительно days-container */
            height: 100%;
            background-color: #60a5fa; /* Синий цвет для отпуска */
            border-radius: 0.25rem;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
            color: white;
            opacity: 0.8;
            overflow: hidden; /* Обрезать текст, если не помещается */
            white-space: nowrap; /* Запретить перенос текста */
        }
        .month-header-container {
            display: flex;
            margin-bottom: 0.5rem;
            padding-left: 166px; /* 150px (имя) + 1rem (отступ) */
        }
        .month-header {
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.875rem;
            font-weight: 500;
            color: #4b5563;
            border-right: 1px solid #d1d5db; /* Разделитель между месяцами */
            height: 30px;
        }
        .month-header:last-child {
            border-right: none;
        }
    </style>
</head>
<body class="bg-gray-100">
    <div class="container">
        <h1 class="text-3xl font-bold text-center mb-8 text-gray-700">График отпусков сотрудников</h1>
        <form id="addVacationForm" class="mb-8 p-6 bg-gray-50 rounded-lg shadow">
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                <div>
                    <label for="employeeName" class="block text-sm font-medium text-gray-700 mb-1">Имя сотрудника:</label>
                    <input type="text" id="employeeName" name="employeeName" required
                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div>
                    <label for="vacationStart" class="block text-sm font-medium text-gray-700 mb-1">Начало отпуска:</label>
                    <input type="date" id="vacationStart" name="vacationStart" required
                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div>
                    <label for="vacationEnd" class="block text-sm font-medium text-gray-700 mb-1">Конец отпуска:</label>
                    <input type="date" id="vacationEnd" name="vacationEnd" required
                           class="w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                </div>
                <div class="flex items-end">
                    <button type="submit" class="btn btn-primary w-full py-2 px-4 rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                        Добавить отпуск
                    </button>
                </div>
            </div>
            <p id="formError" class="text-red-500 text-sm mt-2"></p>
        </form>
        <div class="mb-6 flex flex-col sm:flex-row gap-4 items-center">
            <div>
                <label for="filterMonth" class="block text-sm font-medium text-gray-700 mb-1">Фильтр по месяцу:</label>
                <select id="filterMonth" class="w-full sm:w-auto px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
                    <option value="">Все месяцы</option>
                    </select>
            </div>
            <div>
                <label for="filterYear" class="block text-sm font-medium text-gray-700 mb-1">Фильтр по году:</label>
                <input type="number" id="filterYear" placeholder="Год (напр. 2024)"
                       class="w-full sm:w-auto px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500">
            </div>
             <button id="applyFilters" class="btn btn-primary mt-3 sm:mt-0 sm:self-end py-2 px-4 rounded-md shadow-sm">Применить фильтры</button>
        </div>
        <div class="overflow-x-auto bg-white shadow rounded-lg">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="table-header">
                    <tr>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Сотрудник</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Начало отпуска</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Конец отпуска</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Длительность (дни)</th>
                        <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Действия</th>
                    </tr>
                </thead>
                <tbody id="vacationList" class="bg-white divide-y divide-gray-200">
                    </tbody>
            </table>
        </div>
         <p id="noResultsMessage" class="text-center text-gray-500 mt-4" style="display: none;">Нет данных для отображения с учетом выбранных фильтров.</p>
        <div class="calendar-view">
            <h2 class="text-xl font-semibold text-gray-700 mb-4">Календарь отпусков</h2>
            <div id="monthHeaderContainer" class="month-header-container">
                </div>
            <div id="timelineView" class="timeline">
                </div>
             <p id="noCalendarResultsMessage" class="text-center text-gray-500 mt-4" style="display: none;">Нет данных для отображения в календаре с учетом выбранных фильтров.</p>
        </div>
    </div>
    <div id="confirmDeleteModal" class="modal">
        <div class="modal-content">
            <span class="close-button" id="closeModalButton">×</span>
            <h2 class="text-lg font-semibold mb-4">Подтверждение удаления</h2>
            <p>Вы уверены, что хотите удалить этот отпуск?</p>
            <div class="mt-6 flex justify-end gap-3">
                <button id="cancelDeleteButton" class="btn px-4 py-2 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400">Отмена</button>
                <button id="confirmDeleteButtonAction" class="btn btn-danger px-4 py-2 rounded-md">Удалить</button>
            </div>
        </div>
    </div>
    <script>
        // Массив для хранения данных об отпусках
        let vacations = JSON.parse(localStorage.getItem('vacations')) || [];
        let vacationToDeleteIndex = null; // Для хранения индекса удаляемого отпуска
        // Элементы DOM
        const form = document.getElementById('addVacationForm');
        const vacationList = document.getElementById('vacationList');
        const formError = document.getElementById('formError');
        const confirmDeleteModal = document.getElementById('confirmDeleteModal');
        const closeModalButton = document.getElementById('closeModalButton');
        const cancelDeleteButton = document.getElementById('cancelDeleteButton');
        const confirmDeleteButtonAction = document.getElementById('confirmDeleteButtonAction');
        const filterMonthSelect = document.getElementById('filterMonth');
        const filterYearInput = document.getElementById('filterYear');
        const applyFiltersButton = document.getElementById('applyFilters');
        const noResultsMessage = document.getElementById('noResultsMessage');
        const noCalendarResultsMessage = document.getElementById('noCalendarResultsMessage');
        const timelineView = document.getElementById('timelineView');
        const monthHeaderContainer = document.getElementById('monthHeaderContainer');
        const MS_PER_DAY = 1000 * 60 * 60 * 24;
        // Функция для расчета разницы в днях
        function dateDiffInDays(date1Str, date2Str) {
            const date1 = new Date(date1Str);
            const date2 = new Date(date2Str);
            if (isNaN(date1) || isNaN(date2)) return 0; // Проверка на валидность дат
            const utc1 = Date.UTC(date1.getFullYear(), date1.getMonth(), date1.getDate());
            const utc2 = Date.UTC(date2.getFullYear(), date2.getMonth(), date2.getDate());
            return Math.floor((utc2 - utc1) / MS_PER_DAY) + 1; // +1 чтобы включить оба дня
        }
        // Функция для отображения отпусков в таблице
        function renderVacations(filteredVacations = vacations) {
            vacationList.innerHTML = ''; // Очищаем список перед рендерингом
            if (filteredVacations.length === 0) {
                noResultsMessage.style.display = 'block';
            } else {
                noResultsMessage.style.display = 'none';
            }
            filteredVacations.forEach((vacation, index) => {
                const duration = dateDiffInDays(vacation.start, vacation.end);
                const row = `
                    <tr id="vacation-${index}">
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${vacation.name}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formatDate(vacation.start)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formatDate(vacation.end)}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${duration}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            <button onclick="openDeleteModal(${index})" class="btn btn-danger px-3 py-1 rounded-md text-xs">Удалить</button>
                        </td>
                    </tr>
                `;
                vacationList.insertAdjacentHTML('beforeend', row);
            });
        }
        // Функция для форматирования даты (дд.мм.гггг)
        function formatDate(dateStr) {
            if (!dateStr) return '';
            const date = new Date(dateStr);
            const day = String(date.getDate()).padStart(2, '0');
            const month = String(date.getMonth() + 1).padStart(2, '0'); // Месяцы начинаются с 0
            const year = date.getFullYear();
            return `${day}.${month}.${year}`;
        }
        // Функция для отображения отпусков в календаре
        function renderCalendarView(filteredVacations = vacations) {
            timelineView.innerHTML = '';
            monthHeaderContainer.innerHTML = ''; // Очищаем заголовки месяцев
            if (filteredVacations.length === 0) {
                noCalendarResultsMessage.style.display = 'block';
                return;
            }
            noCalendarResultsMessage.style.display = 'none';
            // Определяем диапазон дат для календаря
            let minDate = new Date(); // Сегодня по умолчанию
            let maxDate = new Date(minDate.getFullYear(), minDate.getMonth() + 2, 0); // Конец следующего месяца по умолчанию
            if (filteredVacations.length > 0) {
                 minDate = new Date(Math.min(...filteredVacations.map(v => new Date(v.start).getTime())));
                 maxDate = new Date(Math.max(...filteredVacations.map(v => new Date(v.end).getTime())));
            }
            // Если выбран год, но не месяц, показываем весь год
            const yearFilter = filterYearInput.value ? parseInt(filterYearInput.value) : null;
            const monthFilter = filterMonthSelect.value ? parseInt(filterMonthSelect.value) : null;
            if (yearFilter && monthFilter === null) { // Год выбран, месяц - нет
                minDate = new Date(yearFilter, 0, 1); // Начало года
                maxDate = new Date(yearFilter, 11, 31); // Конец года
            } else if (yearFilter && monthFilter !== null) { // Год и месяц выбраны
                minDate = new Date(yearFilter, monthFilter, 1);
                maxDate = new Date(yearFilter, monthFilter + 1, 0); // Последний день месяца
            } else if (!yearFilter && monthFilter !== null) { // Только месяц (текущий год)
                 const currentYear = new Date().getFullYear();
                 minDate = new Date(currentYear, monthFilter, 1);
                 maxDate = new Date(currentYear, monthFilter + 1, 0);
            } else if (!yearFilter && !monthFilter && filteredVacations.length === 0) { // Нет фильтров и нет отпусков
                // Используем дефолтные minDate, maxDate (текущий + 2 месяца)
            }
            const totalDaysInRange = dateDiffInDays(minDate, maxDate);
            if (totalDaysInRange <= 0) {
                 noCalendarResultsMessage.style.display = 'block';
                 timelineView.innerHTML = '<p class="text-center text-gray-500">Некорректный диапазон дат для календаря.</p>';
                 return;
            }
            const dayWidthPercentage = 100 / totalDaysInRange;
            // Рендеринг заголовков месяцев
            let currentMonth = new Date(minDate);
            while (currentMonth <= maxDate) {
                const monthName = currentMonth.toLocaleString('ru-RU', { month: 'long' });
                const year = currentMonth.getFullYear();
                const daysInMonth = new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1, 0).getDate();
                // Сколько дней этого месяца попадает в общий диапазон
                let daysVisibleInThisMonth = 0;
                for (let i = 0; i < daysInMonth; i++) {
                    const day = new Date(currentMonth.getFullYear(), currentMonth.getMonth(), currentMonth.getDate() + i);
                    if (day >= minDate && day <= maxDate) {
                        daysVisibleInThisMonth++;
                    }
                }
                if (daysVisibleInThisMonth > 0) {
                    const monthHeader = document.createElement('div');
                    monthHeader.classList.add('month-header');
                    monthHeader.textContent = `${monthName} ${year}`;
                    monthHeader.style.width = `${daysVisibleInThisMonth * dayWidthPercentage}%`;
                    monthHeaderContainer.appendChild(monthHeader);
                }
                currentMonth.setMonth(currentMonth.getMonth() + 1);
                currentMonth.setDate(1); // Переходим на первое число следующего месяца
            }
            // Группируем отпуска по сотрудникам
            const vacationsByEmployee = filteredVacations.reduce((acc, vacation) => {
                if (!acc[vacation.name]) {
                    acc[vacation.name] = [];
                }
                acc[vacation.name].push(vacation);
                return acc;
            }, {});
            for (const employeeName in vacationsByEmployee) {
                const employeeTimeline = document.createElement('div');
                employeeTimeline.classList.add('employee-timeline');
                const nameDiv = document.createElement('div');
                nameDiv.classList.add('employee-name-calendar');
                nameDiv.textContent = employeeName;
                employeeTimeline.appendChild(nameDiv);
                const daysContainer = document.createElement('div');
                daysContainer.classList.add('days-container');
                vacationsByEmployee[employeeName].forEach(vacation => {
                    const vacStart = new Date(vacation.start);
                    const vacEnd = new Date(vacation.end);
                    // Отображаем только те части отпуска, которые попадают в выбранный диапазон
                    const displayStart = new Date(Math.max(vacStart, minDate));
                    const displayEnd = new Date(Math.min(vacEnd, maxDate));
                    if (displayStart <= displayEnd) { // Если отпуск хотя бы частично в диапазоне
                        const offsetDays = dateDiffInDays(minDate, displayStart) -1; // -1 т.к. отсчет с 0
                        const durationInView = dateDiffInDays(displayStart, displayEnd);
                        const dayBlock = document.createElement('div');
                        dayBlock.classList.add('day-block');
                        dayBlock.style.left = `${offsetDays * dayWidthPercentage}%`;
                        dayBlock.style.width = `${durationInView * dayWidthPercentage}%`;
                        // dayBlock.title = `${formatDate(vacation.start)} - ${formatDate(vacation.end)}`; // Подсказка с датами
                        // Попытка добавить текст, если достаточно места
                        if (durationInView * dayWidthPercentage > 5) { // Примерный порог для отображения текста
                           dayBlock.textContent = `Отпуск`;
                        }
                        daysContainer.appendChild(dayBlock);
                    }
                });
                employeeTimeline.appendChild(daysContainer);
                timelineView.appendChild(employeeTimeline);
            }
        }
        // Обработчик отправки формы
        form.addEventListener('submit', function(event) {
            event.preventDefault();
            formError.textContent = ''; // Очищаем предыдущие ошибки
            const name = form.employeeName.value.trim();
            const start = form.vacationStart.value;
            const end = form.vacationEnd.value;
            if (!name || !start || !end) {
                formError.textContent = 'Все поля обязательны для заполнения.';
                return;
            }
            const startDate = new Date(start);
            const endDate = new Date(end);
            if (endDate < startDate) {
                formError.textContent = 'Дата окончания отпуска не может быть раньше даты начала.';
                return;
            }
            // Проверка на пересечение отпусков для одного и того же сотрудника
            const overlappingVacation = vacations.find(v =>
                v.name === name &&
                !(endDate < new Date(v.start) || startDate > new Date(v.end)) // Логика проверки пересечения интервалов
            );
            if (overlappingVacation) {
                formError.textContent = `У сотрудника "${name}" уже есть отпуск, пересекающийся с указанными датами (${formatDate(overlappingVacation.start)} - ${formatDate(overlappingVacation.end)}).`;
                return;
            }
            vacations.push({ name, start, end });
            localStorage.setItem('vacations', JSON.stringify(vacations)); // Сохраняем в localStorage
            renderVacations();
            renderCalendarView();
            populateFilterOptions(); // Обновляем фильтры, т.к. могли появиться новые года/месяцы
            form.reset();
        }
        // Функции для модального окна удаления
        function openDeleteModal(index) {
            vacationToDeleteIndex = index;
            confirmDeleteModal.style.display = 'block';
        }
        function closeDeleteModal() {
            confirmDeleteModal.style.display = 'none';
            vacationToDeleteIndex = null;
        }
        closeModalButton.onclick = closeDeleteModal;
        cancelDeleteButton.onclick = closeDeleteModal;
        window.onclick = function(event) { // Закрытие по клику вне модального окна
            if (event.target == confirmDeleteModal) {
                closeDeleteModal();
            }
        }
        confirmDeleteButtonAction.onclick = function() {
            if (vacationToDeleteIndex !== null) {
                vacations.splice(vacationToDeleteIndex, 1);
                localStorage.setItem('vacations', JSON.stringify(vacations));
                applyAllFilters(); // Перерисовываем с учетом текущих фильтров
                closeDeleteModal();
            }
        }
        // Заполнение опций фильтров
        function populateFilterOptions() {
            const currentMonthValue = filterMonthSelect.value;
            filterMonthSelect.innerHTML = '<option value="">Все месяцы</option>'; // Сброс
            const months = ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"];
            months.forEach((month, index) => {
                const option = document.createElement('option');
                option.value = index; // 0-11
                option.textContent = month;
                filterMonthSelect.appendChild(option);
            });
            filterMonthSelect.value = currentMonthValue; // Восстанавливаем выбранное значение
        }
        // Применение фильтров
        function applyAllFilters() {
            const monthFilter = filterMonthSelect.value;
            const yearFilter = filterYearInput.value;
            let filtered = vacations;
            if (yearFilter) {
                filtered = filtered.filter(v => {
                    const startYear = new Date(v.start).getFullYear();
                    const endYear = new Date(v.end).getFullYear();
                    // Отпуск считается в году, если он начинается ИЛИ заканчивается в этом году
                    return startYear === parseInt(yearFilter) || endYear === parseInt(yearFilter);
                });
            }
            if (monthFilter !== "") { // Если выбран конкретный месяц (0-11)
                filtered = filtered.filter(v => {
                    const startMonth = new Date(v.start).getMonth();
                    const endMonth = new Date(v.end).getMonth();
                    const startYearMatches = yearFilter ? new Date(v.start).getFullYear() === parseInt(yearFilter) : true;
                    const endYearMatches = yearFilter ? new Date(v.end).getFullYear() === parseInt(yearFilter) : true;
                    // Отпуск попадает в месяц, если он начинается в этом месяце (и году)
                    // ИЛИ заканчивается в этом месяце (и году)
                    // ИЛИ полностью покрывает этот месяц (начинается раньше, заканчивается позже)
                    const vacStart = new Date(v.start);
                    const vacEnd = new Date(v.end);
                    const filterMonthDateStart = new Date(yearFilter || new Date().getFullYear(), parseInt(monthFilter), 1);
                    const filterMonthDateEnd = new Date(yearFilter || new Date().getFullYear(), parseInt(monthFilter) + 1, 0);
                    return (vacStart <= filterMonthDateEnd && vacEnd >= filterMonthDateStart);
                });
            }
            renderVacations(filtered);
            renderCalendarView(filtered);
        }
        applyFiltersButton.addEventListener('click', applyAllFilters);
        // Инициализация при загрузке страницы
        document.addEventListener('DOMContentLoaded', () => {
            populateFilterOptions();
            const currentYear = new Date().getFullYear();
            filterYearInput.value = currentYear; // Устанавливаем текущий год по умолчанию
            applyAllFilters(); // Первоначальная отрисовка с учетом фильтров по умолчанию
        });
    </script>
</body>
</html>
